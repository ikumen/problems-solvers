#!/usr/bin/env python

'''
002.py: https://projecteuler.net/problem=2

Even Fibonacci numbers

Each new term in the Fibonacci sequence is generated by adding the previous two 
terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four 
million, find the sum of the even-valued terms.
'''
import os
import pytest


def sum_even_fib_terms(max_term):
	'''Sum of Fibonacci terms that are even, whose term values do 
	not exceed max_term.'''
	terms = []
	_get_fib_terms(max_term, terms)
	sum = 0
	for term in terms:
		if term % 2 == 0:
			sum += term
	return sum

def _get_fib_terms(max_term, terms):
	'''Generates list of Fibonacci terms leading to max_term (not inclusive).'''
	l = len(terms)
	if l == 0:
		terms.append(1)
	elif l == 1:
		terms.append(2)
	else:
		term = terms[l-1] + terms[l-2]
		if term > max_term:
			return
		terms.append(term)
	_get_fib_terms(max_term, terms)


def test_sum_even_fib_terms():
	'''Test'''
	assert 44 == sum_even_fib_terms(90)


def main():
	'''Main runner, delegates to solution.'''
	print(sum_even_fib_terms(4000000))


if __name__ == '__main__':
	main()