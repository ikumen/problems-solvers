#!/usr/bin/env python

'''
012.py: https://projecteuler.net/problem=12

Highly Divisible Triangular Number

The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first 
ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''
import os
import pytest
import time
import math


def find_tri_number(n):
	'''Finds the first triangular number to have over n divisors.'''
	i = 1
	while True:
		tri_num = int(i * (i+1) / 2)
		if _count_divisors(tri_num) > n:
			return tri_num
		i += 1
	return 1


def _count_divisors(tri_num):
	'''Returns the number of divisors for given number n.'''
	count = 2 # 1, n
	for i in range(2, math.floor(math.sqrt(tri_num))):
		if tri_num % i == 0:
			count += 2
	return count


def test_find_tri_number():
	'''Test'''
	assert 28 == find_tri_number(5)


def main():
	'''Main runner, delegates to solution.'''
	print(find_tri_number(500))


if __name__ == '__main__':
	start_time = time.time()
	main()
	print("--- %s seconds ---" % (time.time() - start_time))
